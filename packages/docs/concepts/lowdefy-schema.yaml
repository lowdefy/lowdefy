# Copyright 2020-2022 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: lowdefy-schema
    pageTitle: Lowdefy App Schema
    section: Concepts
    filePath: concepts/lowdefy-schema.yaml
    content:
      - id: md1
        type: MarkdownWithCode
        properties:
          content: |
            A Lowdefy app is written as YAML files, which are combined together using the `_ref` operator when the app is built, into a configuration object that describes the entire app. This object has different sections that describe different parts of the app.

      - id: yaml_understanding_alert
        type: Alert
        properties:
          type: warning
          showIcon: false
          message: |
            A good understanding of YAML is needed before starting with Lowdefy. If you don't have any experience using YAML, you can find a good introduction video <a href = "https://www.youtube.com/watch?v=cdLNKUoMc6c">here</a>.

      - id: md2
        type: MarkdownWithCode
        properties:
          content: |
            The root schema for a Lowdefy app is:
            - `lowdefy: string`: __Required__ - The Lowdefy version number that the app uses. This is required and cannot be a reference to another file.
            - `name: string`: A name for the application.
            - `version: string`: The version number of the app that you are building. This is optional and allows you indicate the version of your app.
            - `license: string`: A [SPDX license ID](https://spdx.org/licenses/). You can use this to indicate the project's license if you are licensing your project under a specific software license. If you wish to indicate to others that you do not grant the right to use your project, you can optionally use `UNLICENSED` for this field. How you share your Lowdefy config is up to you.
            - `cli: object`: An object with configuration for the CLI.
            - `config: object`: An object with app configuration like the home page pageId.
            - `auth: object` An object with auth configuration such as providers and an adapter.
            - `global: object`: A data object that can be accessed anywhere in the app using the [`_global`](/_global) operator.
            - `connections: object[]`: An array of [`connection`](/connections-and-requests) objects.
            - `plugins: object[]`: An array of `plugin` objects to customize and add block types.
            - `menus: object[]`: An array of menu objects.
            - `pages: object[]`: An array of page objects.

            Pages are made up of blocks. Blocks have the following basic schema:
            - `id: string`: An identifier for a block.
            - `type: string`: __Required__ - This is the block type identifier and defines which block will render.
            - `properties: object`: The settings passed to a block component.
            - `layout`: Control how the block will be rendered in the page flow, or in other words, how the block is placed in relation to other blocks. See [layout](/layout) for more details.
            - `blocks: array`: An array of blocks to render within this block.

            Find the more detailed block schema [here](/blocks).

      - id: yaml_json_files_alert
        type: Alert
        properties:
          type: info
          showIcon: false
          message: |
            <h3> YAML file extensions </h3>
            <p> Both files with the <code>.yaml</code> and <code>.yml</code> file extensions are supported as YAML files. </p>
            <h3> JSON instead of YAML </h3>
            <p> Since you can reference JSON files, you can build your app using JSON instead of YAML files. The <code>lowdefy.yaml</code> file needs to be a YAML file, but all other configuration can be in referenced JSON files. It also makes sense to use JSON instead of YAML if you are generating configuration using code. </p>

      - id: md3
        type: MarkdownWithCode
        properties:
          content: |
            ## Config

            The config object has the following properties:

            - `basePath: string`: Set the base path to serve the Lowdefy application from. This will route all pages under `https://example.com/<base-path>/<page-id>` instead of the default `https://example.com/<page-id>`. The basePath value must start with "/".
            - `homePageId: string`: The id of the page that will load when a visitor navigates to the home route, in other words, when the visitor navigates to `yourdomain.com` or `yourdomain.com/`.

            ## Auth

            [TODO]: <> (# TODO: Add auth things here)

            ## Global

            In a Lowdefy app, you can define global variables in the __global__ object, which can be accessed using the [`_global`](/_global) operator, and modified using the [`SetGlobal`](/SetGlobal) action. This is a good place to store data or configuration that is used over various pages throughout the app, for example, user preferences that can be modified using `SetGlobal` on one page and easily referenced on all others.

            ## Connections

            In a Lowdefy app you can integrate with other services like API's or databases using `connections` and `requests`. Use connections to configure the settings to a service, for example, settings such as urls or [`secrets`](/secrets) like passwords or API keys. Requests use connections to interact with external services, for example, inserting a data record or executing a query on a database, or simply calling an API end-point.

            See more about how `connections` and `requests` are used together [here](/connections-and-requests).

            ## Plugins

            [TODO]: <> (# TODO: Add plugins things here)

            ## Menus

            Menu objects describe links to pages, within the app or external. Menu lists are filtered to only show pages that the user is authorized to see as a result of public, private or [role based access controlled (RBAC)](/roles) pages. Blocks such as `PageSiderMenu` render menu links. If no menu defined, a default menu is created, containing links to all pages defined in the app.

            See more about how menu objects are used and defined [here](/menus).

            ## Pages

            Pages in a Lowdefy app are actually just blocks, the building blocks of a Lowdefy app, with a few extra restrictions and features.

            Each page should have an `id` that is unique among all pages in the app. Each page is served with the `pageId` as the url route. That is, if a page is created with id `page1`, it will be served at `domain.com/page1`.

            [TODO]: <> (# TODO: Below will change once we add the head configuration option on pages. Discuss that here.)

            If `properties.title` is set on a page block, the title will be set as the page title (This is the title displayed on the tabs in your browser).

            Let's have a look at how to define a page and it's blocks. We can start with a simple page a card block on it. We can add a title to our card, by making use of the card block's title property. We can also add a paragraph block to our card so that it won't be so empty.

            ###### lowdefy.yaml
            ```yaml
            lowdefy: LOWDEFY_VERSION

            pages:
              - id: page1
                type: PageHeaderMenu
                properties:
                  title: Page 1
                blocks:
                  - id: content_card
                    type: Card
                    properties:
                      title: Title
                    blocks:
                      - id: paragraph
                        type: Paragraph
                        properties:
                          content: This is a paragraph on Page 1.
            ```

            Let's add another card to our page and give it some blocks which will allow us to get input from the user.

            ###### lowdefy.yaml
            ```yaml
            lowdefy: LOWDEFY_VERSION

            pages:
              - id: page1
                type: PageHeaderMenu
                properties:
                  title: Page 1
                blocks:
                  - id: content_card
                    type: Card
                    properties:
                      title: Title
                    blocks:
                      - id: paragraph
                        type: Paragraph
                        properties:
                          content: This is a paragraph on Page 1.
                  - id: input_card
                    type: Card
                    blocks:
                      - id: text_input
                        type: TextInput
                        properties:
                          label:
                            title: Please Enter Your Name
                      - id: radio_selector
                        type: RadioSelector
                        properties:
                          label:
                            title: How Are You Feeling?
                            colon: false
                          options:
                            - label: Meh
                              value: 1
                              disabled: false
                            - label: Okay
                              value: 2
                              disabled: false
                            - label: Good
                              value: 3
                              disabled: false
                            - label: Great
                              value: 4
                              disabled: false
                            - label: Amazing Now That I'm Using Lowdefy
                              value: 5
                              disabled: false
            ```

            In order to build our page further, we will need to add more blocks. Let's leave this page as is and add another page, with it's own card block containing a title block and a paragraph block.

            ###### lowdefy.yaml
            ```yaml
            lowdefy: LOWDEFY_VERSION

            pages:
              - id: page1
                type: PageHeaderMenu
                properties:
                  title: Page 1
                blocks:
                  - id: content_card
                    type: Card
                    properties:
                      title: Title
                    blocks:
                      - id: paragraph
                        type: Paragraph
                        properties:
                          content: This is a paragraph on Page 1.
                  - id: input_card
                    type: Card
                    blocks:
                      - id: text_input
                        type: TextInput
                        properties:
                          label:
                            title: Please Enter Your Name
                      - id: radio_selector
                        type: RadioSelector
                        properties:
                          label:
                            title: How Are You Feeling?
                            colon: false
                          options:
                            - label: Meh
                              value: 1
                              disabled: false
                            - label: Okay
                              value: 2
                              disabled: false
                            - label: Good
                              value: 3
                              disabled: false
                            - label: Great
                              value: 4
                              disabled: false
                            - label: Amazing Now That I'm Using Lowdefy
                              value: 5
                              disabled: false
              - id: page2
                type: PageHeaderMenu
                properties:
                  title: Page 2
                blocks:
                  - id: content_card
                    type: Card
                    properties:
                      title: Title
                    blocks:
                      - id: paragraph
                        type: Paragraph
                        properties:
                          content: This is a paragraph on Page 2.
            ```

            In order to keep files neat and generally easier to read and understand, we suggest making use of references and templating.

            ## References and templates

            References and templates have the following use cases:

            - Splitting out the config for readability and code navigation.
            - Splitting out a piece of config in order to use the exact same config in multiple places.
            - Using a reference with variables to make use of a shared piece of config with dynamic variables.
            - Using an njk file which allows for much more complicated things - this is an advanced feature and easily overused.
            - Using transformers - even more complicated than njk files - should be used if justified, for example, building config from a JSONSchema file.

            References can be used anywhere in the configuration, as long as the configuration resolves to comply with the Lowdefy app schema. Templating can be taken further by referencing [Nunjucks](https://mozilla.github.io/nunjucks/) template files by simply adding .njk to the file extensions, for example, .yaml.njk. Nunjucks templates hydrate variables at build time, before the yaml is parsed, enabling Nunjucks features like for-loops and if-statements.

            See more about references and templates [here](/references-and-templates).

            ## Lowdefy versions and version updates

            Lowdefy is versioned using semantic versioning, with a three part version number, with the form `major.minor.patch`. Lowdefy is under active development and is widely used in enterprise projects. New features and fixes are published on a regular basis, see our [changelog](https://github.com/lowdefy/lowdefy/blob/main/CHANGELOG.md) for the latest release notes.

            [TODO]: <> (# TODO: Add roadmap, for whats to expect next.)

            To update the version of your app, change the `lowdefy` version field in the `lowdefy.yaml` file, and redeploy the app. You might also need to make some changes to your app configuration to be compatible with the new version.

            Patch updates only contain fixes, and you should be safe to update to a patched version without any changes to your app. Since we are actively developing new features, most releases will be minor version updates, and patches won't be made to older versions.

            Minor version changes include new features. At this stage, since the project is still in early development, they might also have minor breaking changes to individual blocks, actions, operators or connections. Please check the [changelog](https://github.com/lowdefy/lowdefy/blob/main/CHANGELOG.md) to see if any configuration changes are needed before updating.

            Major version updates may include major breaking changes or architecture changes. You might need to make more changes to your configuration to be compatible with the new version. We don't intend to release major versions regularly, and try to minimize breaking changes.

            As the project grows, we will release a long term support (LTS) version, that will continue to receive patches, but won't have any breaking changes.

      - _ref:
          path: templates/navigation_buttons.yaml
          vars:
            previous_page_title: The CLI
            previous_page_id: cli
            next_page_title: Context and State
            next_page_id: context-and-state
