# Copyright 2020-2022 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: connections-and-requests
    pageTitle: Connections and Requests
    section: Concepts
    filePath: concepts/connections-and-requests.yaml
    content:
      - id: md1
        type: Markdown
        properties:
          content: |
            In a Lowdefy app you can integrate with other services like API's or databases using `connections` and `requests`. Connections configure the connection settings to the service, and often contain parameters like connection strings, urls and secrets like passwords or API keys. Requests are used to interact with the connection, such as inserting a data record, executing a query or calling an API end-point.

      - id: secrets_alert
        type: Alert
        properties:
          type: warning
          showIcon: false
          message: Sensitive information like passwords or API keys are often required to use external services. The <a href = "./_secret">_secret</a> operator should be used to reference these secrets, they should never be coded directly in your app, or committed to source control.

      - id: md2
        type: Markdown
        properties:
          content: |
            To implement requests, the following steps are required:
            - define a connection.
            - define a request.
            - call the request using a [Request](/Request) action.
            - use returned data by making use of the [_request](/_request) operator.

            ## Connections

            Connections are defined at the root of your Lowdefy configuration, in the `connections` array. Each connection must have an `id`, a `type`, and `properties` defining the connection. Operators in connection properties are evaluated every time a request is called.

            The schema for a Lowdefy connection is:

            - `id: string`: __Required__ - A unique identifier for the connection. This is used by requests to specify which connection to use.
            - `type: string`: __Required__ - The connection type to be used.
            - `properties: object`: The settings passed to the connection. __Operators are evaluated__.

            ###### Connections definition example:
            ```yaml
            lowdefy: LOWDEFY_VERSION
            connections:
              - id: connection1
                type: ConnectionType1
                properties:
                  # ...
              - id: connection2
                type: ConnectionType2
                properties:
                  # ...
            pages:
              # ...
            ```

            Our goal is to make connections for everything. As the Lowdefy community grows, we will continue to develop the most requested connections. If the connection you require is not supported yet, please head over to our [new connections voting board](https://github.com/lowdefy/lowdefy/discussions/309) to request and vote for new connections.

            ## Requests

            Requests can be defined on any block, and the results of the request can be access using the `_request` operator anywhere on the same page. Requests must have an `id`, `type`, `connectionId` field specifying the connection to use, and `properties` defining the request settings. Requests can be called using the [`Request`](/Request) action.

            The client operators to be used are defined in the `payload` field and are accessed by making use of the `_payload` operator in the `properties` field. These operators are evaluated on the client. Operators defined in `properties`, such as `_secret` and `_user`, are evaluated on the server. Operators in the request are evaluated every time a request is called.

      - id: _users_alert
        type: Alert
        properties:
          type: warning
          showIcon: false
          message: The <code>_user</code> operator should be used under <code>properties</code> and not <code>payload</code>. This is important since operators under <code>payload</code> are evaluated on the client, and are therefore vulnerable to users with malicious intent.

      - id: md3
        type: Markdown
        properties:
          content: |
            The schema for a Lowdefy request is:

            - `id: string`: __Required__ - A identifier for the request. It must be unique within the context the request is defined in.
            - `type: string`: __Required__ - The request type to be used. It must be a type supported by the connection type.
            - `payload: object`: The operators to be used inside of the request. __Operators are evaluated on the client__.
            - `connectionId: string`: __Required__ - The `id` of the connection that should be used.
            - `properties: object`: The settings passed to the request. Make use of `_payload` operator to use operators that were evaluated in `payload` mentioned above. __Operators are evaluated on the server__.

            ###### Requests definition example:
            ```yaml
            id: block_with_requests
            type: BlockType
            requests:
              - id: request1
                type: RequestType1
                connectionId: connectionId1 # NOTE: connection with id: connectionId1 must be defined
                payload:
                  field:
                    _state: field
                properties:
                  # ...
              - id: request2
                type: RequestType2
                connectionId: connectionId2 # NOTE: connection with id: connectionId2 must be defined
                properties:
                  # ...
            properties:
              # ...
            ```

            ## Request Action

            The `Request` action calls a request, or if used during an `onInit` event, calls those requests while a page loads. Read more about the `Request` action [here](/Request).

            ###### Call a single request:
            ```yaml
            - id: call_one_request
              type: Request
              params: request1
            ```

            ## _request operator

            The `_request` operator returns the response value of a request. If the request has not yet been call, or is still executing, the returned value is `null`. Read more about the `_request` operator [here](/_request).

            ###### Using a request response:
            ```yaml
            _request: my_request
            ```

            ## General Example

            ###### lowdefy.yaml
            ```yaml
            lowdefy: LOWDEFY_VERSION

            connections:
              - id: connection1
                type: ConnectionType1
                properties:
                  # ...

            pages:
              - id: page1
                type: PageHeaderMenu
                properties:
                  title: Page 1
                requests:
                  - id: request1
                    type: RequestType1
                    connectionId: connection1
                    properties:
                      # ...
                events:
                  onInit:
                    - id: call_request
                      type: Request
                      params: request1
                blocks:
                  - id: content_card
                    type: Card
                    blocks:
                      - id: paragraph
                        type: Paragraph
                        properties:
                          content:
                            _request: request1
            ```

            ### TLDR
              - `connections` define links to other services, like connecting to a database. They are defined at the root of the lowdefy configuration.
              - `requests` use connections to make a call to the connected external services.
              - Use the [`_secret`](/_secret) operator to reference API keys or other secrets as required - do not code secrets into your config or commit secrets to your config source control.

      - _ref:
          path: templates/navigation_buttons.yaml
          vars:
            previous_page_title: Layout
            previous_page_id: layout
            next_page_title: Events and Actions
            next_page_id: events-and-actions
