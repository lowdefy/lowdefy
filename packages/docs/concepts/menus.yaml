# Copyright 2020-2022 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: menus
    pageTitle: Menus
    section: Concepts
    filePath: concepts/menus.yaml
    content:
      - id: menu_filter_alert
        type: Alert
        properties:
          type: info
          showIcon: false
          message: The menu items are filtered according to pages the user is authorized to see. This can be controlled by making pages public or private, or by assigning roles to authenticated users. See <a href = "/protected-pages">protected pages</a> and <a href = "/roles">roles</a> for more on how to set this up.

      - id: md1
        type: MarkdownWithCode
        properties:
          content: |
            Menu objects describe links to pages, within the app or external. Menu lists are filtered to only show pages that the user is authorized to see as a result of public, private or [role based access controlled (RBAC)](/roles) pages. Blocks such as `PageSiderMenu` render menu links. If no menu defined, a default menu is created, containing links to all pages defined in the app.

            By default blocks using a menu, like `PageSiderMenu`, will use the menu with `id: default`. This means that if you create a menu object with `id: default`, this will be used unless another menu is configured and referenced under the block properties, allowing for page specific menu configurations.

            More than one menu can be configured in an app. As an example, this can be used when two logically different sections in the app need different menus.

            If [authentication](/authentication) and [role base authorization (RBAC)](/roles) is configured, pages that the user is restricted from seeing are filtered from the menu object.

            The menu objects can be referenced by using the [`_menu`](/_menu) operator.

            The schema for a menu object is:

            - `id: string`: __Required__ - A identifier for the menu. If it is `default`, it will be used as default by blocks, like `PageHeaderMenu`, which display a menu.
            - `links: object[]`: An array of `MenuLink` or `MenuGroup` objects that form the links in the menu. `MenuGroups` can be two levels deep.

            The schema for a `MenuLink` is:
            - `id: string`: __Required__ - A identifier for the link unique to the menu.
            - `type: string`: __Required__ - The type should be `MenuLink`.
            - `pageId: string`: The id of the page to link to. Used as the menu item title if no title is provided.
            - `url: string`: An external url to link to.
            -  `properties: object`: The properties of the menu link. These are:
                - `title: string`: The title to display for the link.
                - `icon: string | object`: The name of a [React Icon](https://react-icons.github.io/react-icons/search) or properties of an Icon block to use as the icon for the link.

            The schema for a `MenuGroup` is:
            - `id: string`: __Required__ - A identifier for the group unique to the menu.
            - `type: string`: __Required__ - The type should be `MenuGroup`.
            -  `properties: object`: The properties of the menu group. These are:
                - `title: string`: The title to display for the group.
                - `icon: string | object`: The name of a [React Icon](https://react-icons.github.io/react-icons/search) or properties of an Icon block to use as the icon for the group.
            - `links: object[]`: An array of `MenuLink` or `MenuGroup` objects that should be grouped together in the group.

            ###### Menus example:
            ```yaml
            lowdefy: LOWDEFY_VERSION
            menus:
              - id: default
                links:
                  - id: page1
                    type: MenuLink
                    pageId: page1
                    properties:
                      title: Page 1
                      icon: AiOutlineFile
                  - id: top-group
                    properties:
                      title: Group
                      icon: AiOutlineGroup
                    links:
                      - id: page2
                        type: MenuLink
                        pageId: page2 # pageId will be used as link title
                      - id: external
                        type: MenuLink
                        url: https://external.com
                        properties:
                          title: External site
                      - id: nested-group
                        type: MenuGroup
                        properties:
                          title: Nested Group
                        links:
                          - id: page3
                            type: MenuLink
                            pageId: page3
                            properties:
                              title: Page 3
              - id: page-1-and-3
                links:
                  - id: page1
                    type: MenuLink
                    pageId: page1
                    properties:
                      title: Page 1
                      icon: AiOutlineFile
                  - id: page3
                    type: MenuLink
                    pageId: page3
                    properties:
                      title: Page 3
                      icon: AiOutlineControl
            ```

            We can make use of [protected pages](/protected-pages) and [roles](/roles) to filter the menu items according to the pages that the user has access to.

            ###### lowdefy.yaml
            ```yaml
            lowdefy: LOWDEFY_VERSION

            auth:
              # ...
              pages:
                protected: true
                public:
                  - login
                  - '404'
                roles:
                  admin:
                    - page2
                    - page3
                  user:
                    - page1

            menus:
              - id: default
                links:
                  - id: page1
                    type: MenuLink
                    pageId: page1
                    properties:
                      title: Page 1
                      icon: AiOutlineFile
                  - id: page2
                    type: MenuLink
                    pageId: page2 # pageId will be used as link title
                  - id: page3
                    type: MenuLink
                    pageId: page3
                    properties:
                      title: Page 3
              ```

              In the example above, public users can only view the `login` and `404` pages, all other pages require the user to be logged in. If the authorized user had been given only the `user` role, they will only be able to see `page1`. In order to see `page2` and `page3`, the authorized user will need to have the `admin` role assigned to them. The menu will be filtered accordingly and will only contain the menu items that the user has access to.
