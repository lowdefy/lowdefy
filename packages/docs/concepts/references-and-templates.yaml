# Copyright 2020-2022 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: references-and-templates
    pageTitle: References and Templates
    section: Concepts
    filePath: concepts/references-and-templates.yaml
    content:
      - id: md1
        type: MarkdownWithCode
        properties:
          content: |
            References are used to split the configuration of an app into logically distinct files, and to reuse configuration in the app. References can be used almost anywhere in the configuration, as long as the configuration remains valid YAML.

            References are made using the [`_ref`](/_ref) operator. If the referenced file has a `.yaml` or `.json` extension, the contents of the file will be parsed, else the file content is included as a string (this is useful for `.md` or `.html` files). As an example of splitting an app into logically distinct files, references can be used to write each page as a separate file:

            ###### lowdefy.yaml
            ```yaml
            lowdefy: LOWDEFY_VERSION

            pages:
              _ref: pages/page1.yaml # Path to the referenced file. Always from the root of the project.
              _ref: pages/page1.yaml
            ```

            The `_ref` operator can take an argument called `vars`. This can be any data, and is passed down to later be accessed with the [`_var`](/_var) operator. By using vars, the referenced file can become a template, using the given variables. For example, a standard page template might be used for multiple pages in an app:

            ###### pages/page1.yaml
            ```yaml
            _ref:
              path: templates/text_page.yaml
              vars:
                id: page1
                title: Page 1
                content:
                  _ref: markdowns/content.md
            ```

            ###### markdowns/content.md
            ```yaml
            Page content text.
            ```

            ###### templates/text_page.yaml
            ```yaml
            id:
              _var: id
            type: PageHeaderMenu
            properties:
              title:
                _var: title
            blocks:
              - id: content_card
                type: Card
                blocks:
                  - id: title
                    type: Title
                    properties:
                      content:
                        _var: title
                  - id: content
                    type: Markdown
                    properties:
                      content:
                        _var: content
            ```

            ## Nunjucks Templating

            Templating can be taken further by referencing [Nunjucks](https://mozilla.github.io/nunjucks/) template files. If a file ends with the `.njk` file extension, the file will first be hydrated as a Nunjucks template, using the `vars` as template variables. If the file ends with `.yaml.njk` or `.json.njk`, the output of the template will then be parsed. Nunjucks templates are useful since the template file does not need to be valid yaml before it is hydrated, and features like for-loops and if-statements can be used.

            Templating is used extensively to create the Lowdefy docs (these docs are a Lowdefy app). You can look at how they are used [here](https://github.com/lowdefy/lowdefy/tree/main/packages/docs).

            We can modify the example above to make use of nunjucks templating to allow us to add subsections to our page. This can be done as follows:

            ###### pages/page1.yaml
            ```yaml
            _ref:
              path: templates/text_page.yaml.njk
              vars:
                id: page1
                title: Page 1
                content:
                  _ref: markdowns/content.md
                subsections:
                  - id: subsection1
                    title: Subsection 1
                    content: |
                      Subsection 1 content text.
                  - id: subsection2
                    title: Subsection 2
                    content: |
                      Subsection 2 content text.
            ```

            ###### markdowns/content.md
            ```yaml
            Page content text.
            ```

            ###### templates/text_page.yaml.njk
            ```yaml
            id:
              _var: id
            type: PageHeaderMenu
            properties:
              title:
                _var: title
            blocks:
              - id: content_card
                type: Card
                blocks:
                  - id: title
                    type: Title
                    properties:
                      content:
                        _var: title
                  - id: content
                    type: Markdown
                    properties:
                      content:
                        _var: content
                  {% if subsections %}
                  {% for subsection in subsections %}
                  - id: {{ subsection.id }}_title
                    type: Title
                    properties:
                      content: {{ subsection.title }}
                  - id: {{ subsection.id }}_content
                    type: Markdown
                    properties:
                      content: {{ subsection.content }}
                  {% endfor %}
                  {% endif %}
            ```

            ## Custom JavaScript Functions

            TODO: Test common js vs es module exports

            The `_ref` operator can also be extended with custom JavaScript functions. A `resolver` function can be specified, which can overwrite the default way configuration files are read from the filesystem. A `transformer` function can be used to transform the value returned by the `_ref` operator.

            ### Resolver

            This resolver function will first look for the configuration file in the current working directory, but if the file is not found it will be read from an adjacent "shared" directory. This pattern can be used to build apps that mostly use a shared configuration, with a few components that are customised per app.

            ###### resolvers/useLocalOrSharedConfig.js
            ```js
            const fs = require('fs');
            const path = require('path');
            const { promisify } = require('util');

            const readFilePromise = promisify(fs.readFile);

            async function useLocalOrSharedConfig(refPath, vars, context) {
              let fileContent
              try {
                fileContent =  await readFilePromise(path.resolve(refPath), 'utf8');
                return fileContent;
              } catch (error) {
                if (error.code === 'ENOENT') {
                  fileContent = readFilePromise(path.resolve('../shared', refPath), 'utf8');
                  return fileContent;
                }
                throw error;
              }


            }

            module.exports = useLocalOrSharedConfig;
            ```

            ###### lowdefy.yaml
            ```yaml
            lowdefy: LOWDEFY_VERSION

            cli:
              refResolver: resolvers/useLocalOrSharedConfig.js

            pages:
              - _ref: pages/local-page.yaml
              - _ref: pages/shared-page.yaml
            ```

            ### Transformer

            This transformer adds a standard footer to each page:

            ###### transformers/addFooter.js
            ```js
            function addFooter(page, vars) {
              const footer = {
                // ...
              };
              page.areas.footer = footer;
              return page;
            }
            module.exports = addFooter;
            ```

            ###### lowdefy.yaml
            ```yaml
            lowdefy: LOWDEFY_VERSION

            pages:
              - _ref:
                  path: pages/page1.yaml
                  transformer: transformers/addFooter.js
            ```
