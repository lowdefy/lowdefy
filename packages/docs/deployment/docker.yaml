# Copyright 2020-2022 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: docker
    pageTitle: Deploy with Docker
    section: Deployment
    filePath: deployment/docker.yaml
    content:
      - id: md1
        type: Markdown
        properties:
          content: |
            ##### TODO: This page needs to be updated.
      #       The [official Lowdefy Docker](https://hub.docker.com/repository/docker/lowdefy/lowdefy) images can be found on Docker Hub.

      #       Examples of Docker configuration can be found in the [example repository](https://github.com/lowdefy/lowdefy-example-docker).

      #       The Lowdefy Docker images contain a Lowdefy server. The configuration of the Lowdefy app can either be built into a new image based on the Lowdefy image, or the configuration read from the file system, usually provided as a volume.

      #       The Lowdefy server can be configured using the following environment variables:

      #       - `LOWDEFY_BASE_PATH`: Set the base path to serve the Lowdefy application from. This will serve the application under `https://example.com/<base-path>`instead of `https://example.com`,  and all pages under `https://example.com/<base-path>/<page-id>` instead of the default `https://example.com/<page-id>`.
      #       - `LOWDEFY_SERVER_BUILD_DIRECTORY`: The directory of the built Lowdefy configuration (The output of `lowdefy build`, usually found at `./.lowdefy/build` in your project repository). The default is `./build` (or `/home/node/lowdefy/build`).
      #       - `LOWDEFY_SERVER_PUBLIC_DIRECTORY`: The directory of the public assets to be served. The default is `./public` (or `/home/node/lowdefy/public`).
      #       - `LOWDEFY_SERVER_PORT`: The port (inside the container) at which to run the server. The default is `3000`.

      # - id: warning_update_dockerfile
      #   type: Alert
      #   properties:
      #     type: warning
      #     icon: AiFillWarning
      #     description: When updating your app to a new Lowdefy version, make sure to update the Lowdefy version in the Dockerfile

      # - id: md2
      #   type: Markdown
      #   properties:
      #     content: |
      #       # Building a Lowdefy app image

      #       To build the configuration into an image, the following Dockerfile can be used:
      #       ```text
      #       FROM node:14-buster AS build

      #       # Set working directory and node user
      #       WORKDIR /home/node/lowdefy

      #       RUN chown node:node /home/node/lowdefy

      #       USER node

      #       # Copy app config and change ownership of files to "node" user
      #       COPY  --chown=node:node  . .

      #       # Build the Lowdefy config using the Lowdefy CLI
      #       RUN npx lowdefy@3.23.2 build

      #       # Use the correct Lowdefy base image
      #       FROM lowdefy/lowdefy:3.23.2

      #       # Copy build output from build stage
      #       COPY --from=build --chown=node:node /home/node/lowdefy/.lowdefy/build ./build

      #       # Copy contents of public directory into image
      #       COPY --chown=node:node ./public ./public

      #       # Run the server on start
      #       CMD ["node", "./dist/server.js"]
      #       ```

      #       with a `.dockerignore` file:

      #       ```
      #       .lowdefy/**
      #       .env
      #       ```

      #       An image can be built by running:
      #       ```
      #       docker build -t <tag> .
      #       ```

      #       The container can be run by:
      #       ```
      #       docker run -p 3000:3000 <tag>
      #       ```

      #       Docker compose can also be used. Use a `docker-compose.yaml` file:
      #       ```
      #       version: "3.8"
      #       services:
      #         lowdefy:
      #           build: .
      #           ports:
      #             - "3000:3000"
      #       ```

      #       To build the image, run:
      #       ```
      #       docker compose build
      #       ```

      #       To run the app, run:
      #       ```
      #       docker compose up
      #       ```
