# Copyright 2020-2022 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

id: {{ block_type }}
type: PageSiderMenu
requests:
  - id: post_telemetry
    type: AxiosHttp
    connectionId: lowdefy_api_telemetry
    payload:
      session_id:
        _global: session_id
      page_id: {{ block_type }}
      url_query:
        _url_query: true
      input:
        _input: true
    properties:
      data:
        _payload: true


events:
  onInit:
    - id: set_session_id
      type: SetGlobal
      skip:
        _not:
          _eq:
            - _global: session_id
            - null
      params:
        session_id:
          _random:
            type: string
            length: 16
    - id: init_default_properties
      type: SetState
      params:
        block:
          layout:
            align: top
            span: 24
          visible: true
          properties:
            _ref:
              path:
                _var: schema
              transformer: templates/blocks/defaultValueTransformer.js
    - id: init_property_values
      type: SetState
      skip:
        _eq:
          - _var: init_property_values
          - null
      params:
        block:
          properties:
            _var: init_property_values
    - id: init_state_values
      type: SetState
      skip:
        _eq:
          - _var: init_state_values
          - null
      params:
        _var: init_state_values

  onInitAsync:
    {# - id: connect_docsearch
      type: JsAction # TODO:
      params:
        name: connectDocsearch #}
    - id: post_telemetry
      type: Request
      messages:
        error: false
      params: post_telemetry

properties:
  title: {{ block_type }}
  header:
    theme: light
  menu:
    forceSubMenuRender: true
  sider:
    width: 256px
    initialCollapsed:
      _or:
        - _eq:
            - _media: size
            - md
        - _eq:
            - _media: size
            - lg
  layout:
    style:
      background: '#FFFFFF'
  footer:
    style:
      background: '#FFFFFF'
  breadcrumb:
    list:
      - _ref: version.yaml
      - {{ category }}
      - {{ block_type }}
layout:
  contentGutter: 16
areas:
  header:
    blocks:
      _ref: templates/header.yaml
  footer:
    blocks:
      _ref:
        path: templates/footer.yaml.njk
        vars:
          hideFeedback:
            _var: hideFeedback
          filePath:
            _var: filePath
          pageId:
            _var: block_type
  content:
    blocks:
      - id: title
        type: Title
        properties:
          level: 2
          content:
            _var: block_type
      {% if value_type %}
      - id: value_type
        type: Markdown
        properties:
          content: |
            ```
            value type: {{ value_type }}
            ```
      {% endif %}
      {% if areas %}
      - id: areas_list
        type: Markdown
        properties:
          content: |
            {% if user_defined_areas -%}
            ```
            areas: [key]
            ```
            {% else %}
            ```
            areas: {{ areas | join(', ') }}
            ```
            {% endif %}
      {% endif %}
      - id: description
        type: Markdown
        properties:
          content:
            _var: description_content
      - id: left_column
        type: Box
        layout:
          span: 12
        blocks:
          - id: block_divider
            type: Divider
            properties:
              title: Block
          - id: block_id
            type:
              _var: block_type
            layout:
              _state: block.layout
            style:
              _yaml.parse:
                - _if_none:
                    - _state: style_block_input
                    - ''
            {% if category != "context" %}
            visible:
              _state: block.visible
            {% endif %}
            required:
              _state: block.required
            properties:
              _custom_filter_default_value:
                value:
                  _ref:
                        path:
                          _var: schema
                        vars:
                          block_type: {{ block_type }}
                        transformer: templates/blocks/propertiesGetterTransformer.js
                defaultValue:
                  _ref:
                    path:
                      _var: schema
                    transformer: templates/blocks/defaultValueTransformer.js

            {% if areas %}
            areas:
              {% for area in areas %}
              {{ area }}:
                gutter: 0
                style:
                  border: 1px dashed red
                blocks:
                  - id: block_area_{{ area }}
                    type: Html
                    style:
                      background: '#f0f2f5'
                      textAlign: center
                      padding: 2px 5px
                      color: red
                    properties:
                      html: {{ area }}
              {% endfor %}
            {% endif %}
          {% if methods %}
          - id: method_divider
            type: Divider
            properties:
              title: Methods
          {% for method in methods %}
          - id: method_button_{{ method.name }}
            type: Button
            layout:
              span: 12
              md:
                span: 24
            properties:
              title: {{ method.name }}
            events:
              onClick:
                _var: methods.{{ loop.index0 }}.onClick
          - id: method_args_{{ method.name }}
            type: MarkdownWithCode
            layout:
              span: 12
              md:
                span: 24
            properties:
              content:
                _nunjucks:
                  template: |
                    {% raw %}
                    ```yaml
                    onClick:
                    {{ value | safe }}
                    ```
                    {% endraw %}
                  on:
                    value:
                      _yaml.stringify:
                        on:
                          _var: methods.{{ loop.index0 }}.onClick
                        options:
                          sortKeys: false

          {% endfor %}
          {% endif %}
          {% if category == 'input' %}
          - id: state_divider
            type: Divider
            properties:
              title: State
          - id: state_markdown
            type: MarkdownWithCode
            properties:
              content:
                _nunjucks:
                  template: |
                    {% raw %}
                    ```yaml
                    {{ value | safe }}
                    ```
                    {% endraw %}
                  on:
                    value:
                      _yaml.stringify:
                        - block_id:
                            _state: block_id
          {% endif %}
          - id: setup_divider
            type: Divider
            properties:
              title: Block Setup
          - id: setup_markdown
            type: MarkdownWithCode
            properties:
              content:
                _nunjucks:
                  template: |
                    {% raw %}
                    ```yaml
                    {{ value | safe }}
                    ```
                    {% endraw %}
                  on:
                    value:
                      _yaml.stringify:
                        options:
                          sortKeys: false
                        on:
                          _custom_filter_default_value:
                            value:
                              id: block_id
                              type: {{ block_type }}
                              required:
                                _state: block.required
                              visible:
                                _state: block.visible
                              layout:
                                _state: block.layout
                              style:
                                _yaml.parse:
                                  - _if_none:
                                      - _state: style_block_input
                                      - ''
                              properties:
                                _ref:
                                  path:
                                    _var: schema
                                  vars:
                                    block_type: {{ block_type }}
                                  transformer: templates/blocks/propertiesGetterTransformer.js
                            defaultValue:
                              required: false
                              visible: true
                              layout:
                                align: top
                                span: 24
                              properties:
                                _ref:
                                  path:
                                    _var: schema
                                  transformer: templates/blocks/defaultValueTransformer.js

      - id: right_column
        type: Box
        layout:
          span: 12
        blocks:
          - id: settings_divider
            type: Divider
            properties:
              title: Settings
          - id: settings_collapse
            type: Collapse
            properties:
              defaultActiveKey: properties
              panels:
                - key: properties
                  title: 'properties:'
                - key: layout
                  title: 'layout:'
                - key: style
                  title: 'style:'
                - key: events
                  title: 'events:'
                - key: required
                  title: 'required:'
                  disabled:
                    _not:
                      _eq:
                        - _var: category
                        - input
                - key: visible
                  title: 'visible:'
                  disabled:
                    _eq:
                      - _var: category
                      - context
            areas:
              properties:
                blocks:
                  _ref:
                    path:
                      _var: schema
                    transformer: templates/blocks/propertiesFormTransformer.js
              layout:
                blocks:
                  _ref: templates/blocks/layout.yaml
              style:
                blocks:
                  _ref: templates/blocks/style.yaml
              events:
                blocks:
                  - id: event_description
                    type: Markdown
                    properties:
                      content:
                        _nunjucks:
                          template: |
                            {% raw %}
                            {% for event in events %}
                                {{ event.k }}:

                              {{ event.v.description }}

                            {% endfor %}
                            {% endraw %}
                          on:
                            _get:
                              key: '0'
                              from:
                                _mql.aggregate:
                                  on:
                                    - events:
                                        _object.assign:
                                          - _get:
                                              key: schema.events.properties
                                              default: {}
                                              from:
                                                _ref:
                                                  path:
                                                    _var: schema
                                          - onMount:
                                              type: array
                                              description: Trigger actions every time the block is mounted and render the block in its loading state until all actions have finished.
                                            onMountAsync:
                                              type: array
                                              description: Trigger actions every time the block is mounted and do not render the block in its loading state.
                                  pipeline:
                                    - $project:
                                        events:
                                          $objectToArray: $events


              required:
                blocks:
                  - id: block.required
                    type: Switch
                    properties:
                      title: required
                      label:
                        extra: Toggle if the field is indicated as compulsory and required when the Validate action is called.
                        align: right
                        span: 8
                      size: small
              {% if category != "context" %}
              visible:
                blocks:
                  - id: block.visible
                    type: Switch
                    properties:
                      title: visible
                      label:
                        extra: Toggle if block is visible and has a value in state.
                        align: right
                        span: 8
                      size: small
              {% endif %}
      {% if examples %}
      - id: examples_divider
        type: Divider
        properties:
          title: Examples
      - _ref:
          path: README.md
          transformer: templates/blocks/exampleTransformer.js
          vars:
            block_type: {{ block_type }}
            examples:
              _var: examples
      {% endif %}
      - _ref:
          path: templates/blocks/schema.yaml.njk
          vars:
            block_type: {{ block_type }}
            schema_definition:
              _ref:
                path:
                  _var: schema
                transformer: templates/blocks/schemaTransformer.js
