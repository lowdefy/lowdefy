# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/controls.yaml.njk
  vars:
    pageId: :reject
    pageTitle: :reject
    filePath: controls/reject.yaml
    types: |
      ```
      ({:reject: string, :cause: any}): void
      ```
    description: |
      The `:reject` control is used to return a user-friendly error to the client when validation fails or business rules are violated.
      Unlike [`:throw`](/:throw), which indicates a system error, `:reject` represents an expected failure condition that should be communicated to the user.
      The control immediately stops routine execution and returns with a `"reject"` status.
      Importantly, `:reject` does not trigger `:catch` blocks in [`:try`](/:try) statements, making it ideal for handling validation and business logic errors separately from system errors.
    controlKeys: |
      - `:reject: string`: __Required__ - The error message that will be returned in the response object of the API call result.
      - `:cause: any`: Additional metadata that will be returned with the error message.
    examples: |
      ###### Example

      ```yaml
      - id: check_inventory
        type: MongoDBFindOne
        connectionId: products
        properties:
          query:
            product_id:
              _payload: product_id
      - :if:
          _lt:
            - _step: check_inventory.quantity
            - _payload: requested_quantity
        :then:
          :reject:
            _string.concat:
              - "Insufficient inventory. Only "
              - _step: check_inventory.quantity
              - " items available"
      ```

      ###### Reject with Additional Context

      ```yaml
      - :if:
          _not:
            _step: get_user.email_verified
        :then:
          :reject: "Please verify your email before proceeding"
          :cause:
            user_id:
              _step: get_user._id
            email:
              _step: get_user.email
            account_created_at:
              _step: get_user.created_at
      ```
