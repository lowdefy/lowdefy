# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/controls.yaml.njk
  vars:
    pageId: :try
    pageTitle: :try
    filePath: controls/try.yaml
    types: |
      ```
      ({:try: routine, :catch: routine, :finally: routine}): void
      ```
    description: |
      If one control in the routine chain defined in the `:try` key fails by throwing an error, the steps in the list following the failed control will not be executed.
      To handle any errors thrown by a routine element, a routine can be provided using `catch` key.
      The routine defined using the `:finally` key will be run regardless of whether or not the routine throws an error.
    controlKeys: |
      - `:try: routine`: __Required__ - The routine to be run.
      - `:catch: routine`: The routine to execute if any step in the routine defined errors.
      - `:finally: routine`: The routine to be run regardless of the out come of the initial routine.
    examples: |
      ###### Try external API with fallback
      ```yaml
      - :try:
          - id: get_weather
            type: AxiosHttp
            connectionId: weather-api
            properties:
              url: /current
              params:
                city:
                  _payload: city
        :catch:
          - id: get_default_weather
            type: MongoDBFindOne
            connectionId: weather-cache
            properties:
              query:
                city:
                  _payload: city
      - :return:
          weather:
            _if:
              test:
                _step: get_weather
              then:
                _step: get_weather.data
              else:
                _step: get_default_weather
      ```

      ###### Try database operation with fallback
      ```yaml
      - :try:
          - id: update_user
            type: MongoDBUpdateOne
            connectionId: database
            properties:
              filter:
                _id:
                  _payload: user._id
              update:
                $set:
                  last_login:
                    _date: now
        :catch:
          - :log:
              message: 'Database update failed, creating new user record'
              user_id:
                _payload: user._id
            :level: warn
          - id: create_user
            type: MongoDBInsertOne
            connectionId: database
            properties:
              doc:
                _id:
                  _payload: user._id
                last_login:
                  _date: now
                created_at:
                  _date: now
        :finally:
          - :log:
              message: 'User login process completed'
            :level: info
      - :return:
          success: true
          user_id:
            _payload: user._id
      ```
