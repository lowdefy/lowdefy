# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/controls.yaml.njk
  vars:
    pageId: :return
    pageTitle: :return
    filePath: controls/return.yaml
    types: |
      ```
      ({:return: any}): void
      ```
    description: |
      The `:return` control immediately ends the execution of an API endpoint routine and returns a successful response with the specified data.
      Any routine steps after a `:return` are not executed. The control accepts any value type (objects, arrays, strings, numbers, null) and marks the API call as successful.
      When used within conditional controls like [`:if`](/:if) or [`:switch`](/:switch), it provides a way to exit early with a success status and return data to the client.
    controlKeys: |
      - `:return: any`: __Required__ - The value that will be returned in the response object of the API call result.
    examples: |
      ###### Return Step Result

      ```yaml
      - id: get_company
        type: MongoDBInsertOne
        connectionId: companies
        properties:
          doc:
            _id:
              _payload: company_id
      - :return:
          _step: get_company
      ```

      ###### Switch with multiple returns

      ```yaml
      - id: get_user_subscription
        type: MongoDBFindOne
        connectionId: subscriptions
        properties:
          query:
            user_id:
              _user: id
      - :switch:
          - :case:
              _not:
                _step: get_user_subscription
            :then:
              :return:
                plan: "free"
                features: ["basic_access"]
                limit: 10
          - :case:
              _eq:
                - _step: get_user_subscription.type
                - "premium"
            :then:
              :return:
                plan: "premium"
                features: ["full_access", "priority_support", "api_access"]
                limit: -1
        :default:
          :return:
            plan: "standard"
            features: ["standard_access", "email_support"]
            limit: 100
      ```
